<2023/1/1>项目开始构建
    -新的一年,造个语言
    -开始构建is的基础设施(Array,Stack等)
    文件更新:
     <common.h/common.cpp>
        +加入assert函数(断言函数,用于报错)
        +加入ceilToPowerOf2函数(给可变数组扩容用的)
     <array.h>
        =Array类大致构建完毕(于main.cpp中测试些许功能正常)
        =一个空的Array至少得占用12byte的空间,在64bit系统中占16byte
<2023/1/12>构建项目
    文件更新:
    <options.h>
        +加入该文件并用于调控编译设置,可以启用调试模式以实现代码中的断言等功能
        +加入宏定义断言
<2023/1/13>改Clion配色方案
    =改完了,将oneDarkPro改成了我习惯的模样
<2023/1/14> -> <2023/1/16>
    文件更新:
        <tokenKind.enum>
            +加入了该枚举描述文件,用于描述Token的各个类型
        <lexer.h/cpp>
            +完成了词法分析器框架
        <ireport.h/cpp & repId.enum>
            +加入了报错系统
        <imodifier.h>
            +加入了修饰器,作为类型系统的工具,用于将一组布尔信息作为bit存到一个integer内,节省空间
        <icompiler.h/cpp>
            +加入CompileUnit,用于编译单文件
        <ivm.h/cpp>
            +仅仅初始定义了一下VM(空哒)
<2023/1/31>
    鸽:
        不想写开发日志了,毕竟git的commit上有提交信息,想看开发日志就看看那个得了,
        以后要是有比较重要的信息才搁这开发日志里写吧.
    更新&修改&介绍:
        +计算器编译器大致完工,报错也调试正常!
        +更新了VM与CompileUnit的结构,以后所有的常量将放在VM的一张大表里,所有的函数将存在一个ByteStream里
         该ByteStream目前在VM里,以后会新加一个Compiler结构,然后把其改到Compiler里
        ~修改了文件结构,删去了一些仅被VM使用的结构(这些结构的功能被移植到了VM),具体的文件可以看git的commit信息
        =介绍一下Compiler等结构的作用:
          - VM              虚拟机 用于执行编译指令流,在编译期间用于存储常量数据
          - Value           值 作为运行期虚拟机直接操作的对象
          - Compiler        编译器 用于整合编译单元,处理多文件编译,并存储编译数据
          - CompilerUnit    编译单元 用于编译单个文件,其含有的编译递归调用链是该编译器的核心
          - Modifier        修饰器 作为编译器以高内存利用率存储开关信息的工具
          - Lexer           词法分析器 用于读取并分析源码文件,从而为CompileUnit提供Token
          - Token           词法单元 存储词法单元的信息,供CompileUnit使用
          - Array<T>        数组 基础容器,十分常用
          - HashMap<K,V>    哈希表 基础容器,用于快速存取
